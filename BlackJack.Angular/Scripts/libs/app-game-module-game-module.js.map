{"version":3,"sources":["webpack:///./src/app/game-module/game-routing.module.ts","webpack:///./src/app/game-module/game.module.ts","webpack:///./src/app/game-module/game/game.component.html","webpack:///./src/app/game-module/game/game.component.ts","webpack:///./src/app/game-module/player-output/player-output.component.html","webpack:///./src/app/game-module/player-output/player-output.component.ts","webpack:///./src/app/shared/mapping-models/game-mapping-model.ts","webpack:///./src/app/shared/services/round.service.ts"],"names":[],"mappings":"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","file":"app-game-module-game-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { GameComponent } from 'app/game-module/game/game.component';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: GameComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [ RouterModule.forChild(routes) ],\r\n    exports: [ RouterModule ]\r\n})\r\nexport class GameRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'app/shared/modules/shared.module';\r\nimport { GameRoutingModule } from 'app/game-module/game-routing.module';\r\n\r\nimport { GameComponent } from 'app/game-module/game/game.component';\r\nimport { PlayerOutputComponent } from 'app/game-module/player-output/player-output.component';\r\n\r\nimport { RoundService } from 'app/shared/services/round.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        GameRoutingModule,\r\n        SharedModule\r\n    ],\r\n    declarations: [\r\n        GameComponent,\r\n        PlayerOutputComponent\r\n    ],\r\n    providers: [\r\n        RoundService\r\n    ]\r\n})\r\nexport class GameModule { }\r\n","module.exports = \"<div class=\\\"row row-flex\\\">\\r\\n    <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-xs-12 well\\\">\\r\\n        <h4><span class=\\\"label label-danger\\\">Dealer</span></h4>\\r\\n        <app-player-output [cards]=\\\"game.dealer.cards\\\" [name]=\\\"game.dealer.name\\\" [cardScore]=\\\"game.dealer.cardScore\\\"></app-player-output>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-lg-8 col-md-8 col-sm-8 col-xs-12 well\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-6 col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                <h4><span class=\\\"label label-primary\\\">Human</span></h4>\\r\\n                <app-player-output [cards]=\\\"game.human.cards\\\" [name]=\\\"game.human.name\\\" [cardScore]=\\\"game.human.cardScore\\\"></app-player-output>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-lg-6 col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                <div *ngIf=\\\"takeCardGamePlay\\\">\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"takeCard()\\\">Take card</button>\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"endRound()\\\">Don't take</button>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"endRoundGamePlay\\\">\\r\\n                    <p>{{game.roundResult}}</p>\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"startRound()\\\">End round</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row row-flex\\\">\\r\\n    <div *ngFor=\\\"let bot of game.bots\\\" class=\\\"col-lg-2 col-md-4 col-sm-4 col-xs-6 well\\\">\\r\\n        <h4><span class=\\\"label label-default\\\">Bot</span></h4>\\r\\n        <app-player-output [cards]=\\\"bot.cards\\\" [name]=\\\"bot.name\\\" [cardScore]=\\\"bot.cardScore\\\"></app-player-output>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { RoundService } from 'app/shared/services/round.service';\r\nimport { StartService } from 'app/shared/services/start.service';\r\n\r\nimport { GameMappingModel } from 'app/shared/mapping-models/game-mapping-model';\r\nimport { StartRoundView } from 'app/shared/models/start-round.view';\r\nimport { RestoreRoundView } from 'app/shared/models/restore-round.view';\r\nimport { TakeCardRoundView } from 'app/shared/models/take-card-round.view';\r\nimport { EndRoundView } from 'app/shared/models/end-round.view';\r\n\r\n@Component({\r\n    selector: 'app-game',\r\n    templateUrl: './game.component.html'\r\n})\r\nexport class GameComponent implements OnInit {\r\n    gameId: number;\r\n    game: GameMappingModel = new GameMappingModel();\r\n    \r\n    takeCardGamePlay: boolean = false;\r\n    endRoundGamePlay: boolean = false;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private roundService: RoundService,\r\n        private startService: StartService\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.route.params.subscribe(params => {\r\n            this.gameId = params['gameId'];\r\n            let isNewGame = params['isNewGame'];\r\n\r\n            if (isNewGame == \"true\") {\r\n                this.startRound();\r\n            }\r\n\r\n            if (isNewGame == \"false\") {\r\n                this.restoreRound();\r\n            }\r\n        });\r\n    }\r\n    \r\n    startRound() {\r\n        this.roundService.startRound(this.gameId)\r\n            .subscribe(\r\n                (data: StartRoundView) => {\r\n                    this.game = Object.assign(new GameMappingModel, data);\r\n                    this.setGamePlay();\r\n                }\r\n            );\r\n    }\r\n\r\n    takeCard() {\r\n        this.roundService.takeCard(this.gameId)\r\n            .subscribe(\r\n                (data: TakeCardRoundView) => {\r\n                    this.game.roundResult = data.roundResult;\r\n                    this.game.human = Object.assign(this.game.human, data.human);\r\n\r\n                    for (let iterator = 0; iterator < data.bots.length; iterator++) {\r\n                        this.game.bots[iterator] = Object.assign(this.game.bots[iterator], data.bots[iterator]);\r\n                    }\r\n\r\n                    this.setGamePlay();\r\n                }\r\n            );\r\n    }\r\n\r\n    endRound() {\r\n        this.roundService.endRound(this.gameId)\r\n            .subscribe(\r\n                (data: EndRoundView) => {\r\n                    this.game.roundResult = data.roundResult;\r\n                    this.game.dealer = Object.assign(this.game.dealer, data.dealer);\r\n                    this.setGamePlay();\r\n                }\r\n            );\r\n    }\r\n\r\n    restoreRound() {\r\n        this.roundService.restoreRound(this.gameId)\r\n            .subscribe(\r\n                (data: RestoreRoundView) => {\r\n                    this.game = Object.assign(new GameMappingModel, data);\r\n                    this.setGamePlay();\r\n                }\r\n            );\r\n    }\r\n\r\n    setGamePlay() {\r\n        if (this.game.roundResult == \"Round is in process\") {\r\n            this.endRoundGamePlay = false;\r\n            this.takeCardGamePlay = true;\r\n        }\r\n\r\n        if (this.game.roundResult != \"Round is in process\") {\r\n            this.endRoundGamePlay = true;\r\n            this.takeCardGamePlay = false;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<p>Name: {{name}}</p>\\r\\n<p>CardScore: {{cardScore}}</p>\\r\\n\\r\\n<p>Cards:</p>\\r\\n<ul>\\r\\n    <li *ngFor=\\\"let card of cards\\\">{{card}}</li>\\r\\n</ul>\"","import { Component } from '@angular/core';\r\nimport { Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-player-output',\r\n    templateUrl: './player-output.component.html'\r\n})\r\nexport class PlayerOutputComponent {\r\n    @Input() name: string;\r\n    @Input() cardScore: number;\r\n    @Input() cards: string[];\r\n}\r\n","﻿export class GameMappingModel {\r\n    roundResult: string;\r\n    human: PlayerMappingModel;\r\n    dealer: PlayerMappingModel;\r\n    bots: PlayerMappingModel[];\r\n}\r\n\r\nexport class PlayerMappingModel {\r\n    name: string;\r\n    cardScore: number;\r\n    cards: string[];\r\n}","﻿import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { RestoreRoundView } from 'app/shared/models/restore-round.view';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class RoundService {\r\n    constructor(private httpClient: HttpClient) { }\r\n    \r\n    startRound(gameId: number) {\r\n        const options = gameId ?\r\n            { params: new HttpParams().set('gameId', gameId.toString()) } : {};\r\n\r\n        return this.httpClient.get('Round/Start', options);\r\n    }\r\n\r\n    endRound(gameId: number) {\r\n        const options = gameId ?\r\n            { params: new HttpParams().set('gameId', gameId.toString()) } : {};\r\n\r\n        return this.httpClient.get('Round/End', options);\r\n    }\r\n\r\n    takeCard(gameId: number) {\r\n        const options = gameId ?\r\n            { params: new HttpParams().set('gameId', gameId.toString()) } : {};\r\n\r\n        return this.httpClient.get('Round/TakeCard', options);\r\n    }\r\n\r\n    restoreRound(gameId: number): Observable<RestoreRoundView> {\r\n        const options = gameId ?\r\n            { params: new HttpParams().set('gameId', gameId.toString()) } : {};\r\n\r\n        return this.httpClient.get<RestoreRoundView>('Round/Restore', options);\r\n    }\r\n    \r\n}"],"sourceRoot":""}