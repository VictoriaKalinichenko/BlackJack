{"version":3,"sources":["webpack:///./src/app/game-module/game-routing.module.ts","webpack:///./src/app/game-module/game.module.ts","webpack:///./src/app/game-module/game/game.component.html","webpack:///./src/app/game-module/game/game.component.ts","webpack:///./src/app/game-module/player-output/player-output.component.html","webpack:///./src/app/game-module/player-output/player-output.component.ts","webpack:///./src/app/shared/models/game-model.ts","webpack:///./src/app/shared/models/request-start-round.view.ts","webpack:///./src/app/shared/services/round.service.ts"],"names":[],"mappings":"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","file":"app-game-module-game-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { GameComponent } from 'app/game-module/game/game.component';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: GameComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [ RouterModule.forChild(routes) ],\r\n    exports: [ RouterModule ]\r\n})\r\nexport class GameRoutingModule { }","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'app/shared/modules/shared.module';\r\nimport { GameRoutingModule } from 'app/game-module/game-routing.module';\r\n\r\nimport { GameComponent } from 'app/game-module/game/game.component';\r\nimport { PlayerOutputComponent } from 'app/game-module/player-output/player-output.component';\r\nimport { RoundService } from 'app/shared/services/round.service';\r\n\r\n@NgModule({\r\n    imports: [\r\n        GameRoutingModule,\r\n        SharedModule\r\n    ],\r\n    declarations: [\r\n        GameComponent,\r\n        PlayerOutputComponent\r\n    ],\r\n    providers: [\r\n        RoundService\r\n    ]\r\n})\r\nexport class GameModule { }\r\n","module.exports = \"<div class=\\\"row row-flex\\\">\\r\\n    <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-xs-12 well\\\">\\r\\n        <h4><span class=\\\"label label-danger\\\">Dealer</span></h4>\\r\\n        <app-player-output [cards]=\\\"game.dealer.cards\\\" [name]=\\\"dealerName\\\" [cardScore]=\\\"game.dealer.cardScore\\\"></app-player-output>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col-lg-8 col-md-8 col-sm-8 col-xs-12 well\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-6 col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                <h4><span class=\\\"label label-primary\\\">Human</span></h4>\\r\\n                <app-player-output [cards]=\\\"game.human.cards\\\" [name]=\\\"humanName\\\" [cardScore]=\\\"game.human.cardScore\\\"></app-player-output>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-lg-6 col-md-6 col-sm-6 col-xs-12\\\">\\r\\n                <div *ngIf=\\\"takeCardGamePlay\\\">\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"takeCard()\\\">Take card</button>\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"endRound()\\\">Don't take</button>\\r\\n                </div>\\r\\n\\r\\n                <div *ngIf=\\\"endRoundGamePlay\\\">\\r\\n                    <p>{{game.roundResult}}</p>\\r\\n                    <button class=\\\"btn btn-primary\\\" (click)=\\\"startRound(true)\\\">End round</button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row row-flex\\\">\\r\\n    <div *ngFor=\\\"let bot of game.bots; let i = index\\\" class=\\\"col-lg-2 col-md-4 col-sm-4 col-xs-6 well\\\">\\r\\n        <h4><span class=\\\"label label-default\\\">Bot</span></h4>\\r\\n        <app-player-output [cards]=\\\"bot.cards\\\" [name]=\\\"botNames[i]\\\" [cardScore]=\\\"bot.cardScore\\\"></app-player-output>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { GameModel, PlayerModel } from 'app/shared/models/game-model';\r\nimport { RoundService } from 'app/shared/services/round.service';\r\nimport { StartService } from 'app/shared/services/start.service';\r\n\r\n@Component({\r\n    selector: 'app-game',\r\n    templateUrl: './game.component.html'\r\n})\r\nexport class GameComponent implements OnInit {\r\n    gameId: number;\r\n    humanName: string;\r\n    dealerName: string = \"Dealer\";\r\n    botNames: string[] = [\"Bot0\", \"Bot1\", \"Bot2\", \"Bot3\", \"Bot4\"];\r\n    game: GameModel = new GameModel();\r\n    \r\n    takeCardGamePlay: boolean = false;\r\n    endRoundGamePlay: boolean = false;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private roundService: RoundService,\r\n        private startService: StartService\r\n    ) { }\r\n\r\n    ngOnInit() : void {\r\n        this.route.params.subscribe(params => {\r\n            this.gameId = params['gameId'];\r\n            this.humanName = params['userName'];\r\n            let isNewRound: boolean = params['isNewGame'];\r\n            this.startRound(isNewRound);\r\n        });\r\n    }\r\n\r\n    startRound(isNewRound: boolean): void {\r\n        this.roundService.startRound(this.gameId, isNewRound)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.game = data as GameModel;\r\n                    this.setGamePlay();\r\n                }\r\n            );\r\n    }\r\n\r\n    takeCard(): void {\r\n        this.roundService.takeCard(this.gameId)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.game = data as GameModel;\r\n                    this.setGamePlay();\r\n                }\r\n            );\r\n    }\r\n\r\n    endRound(): void {\r\n        this.roundService.endRound(this.gameId)\r\n            .subscribe(\r\n                (data) => {\r\n                    this.game.roundResult = data.roundResult;\r\n                    this.game.dealer = data.dealer as PlayerModel;\r\n                    this.setGamePlay();\r\n                }\r\n            );\r\n    }\r\n\r\n    setGamePlay(): void {\r\n        if (this.game.roundResult == \"Round is in process\") {\r\n            this.endRoundGamePlay = false;\r\n            this.takeCardGamePlay = true;\r\n        }\r\n\r\n        if (this.game.roundResult != \"Round is in process\") {\r\n            this.endRoundGamePlay = true;\r\n            this.takeCardGamePlay = false;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<p>Name: {{name}}</p>\\r\\n<p>CardScore: {{cardScore}}</p>\\r\\n\\r\\n<p>Cards:</p>\\r\\n<ul>\\r\\n    <li *ngFor=\\\"let card of cards\\\">{{card}}</li>\\r\\n</ul>\"","import { Component } from '@angular/core';\r\nimport { Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-player-output',\r\n    templateUrl: './player-output.component.html'\r\n})\r\nexport class PlayerOutputComponent {\r\n    @Input() name: string;\r\n    @Input() cardScore: number;\r\n    @Input() cards: string[];\r\n}\r\n","﻿export class GameModel {\r\n    roundResult: string;\r\n    human: PlayerModel;\r\n    dealer: PlayerModel;\r\n    bots: PlayerModel[];\r\n}\r\n\r\nexport class PlayerModel {\r\n    cardScore: number;\r\n    cards: string[];\r\n}","﻿export class RequestStartRoundView {\r\n    gameId: number;\r\n    isNewRound: boolean;\r\n}","﻿import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EndRoundView } from '../models/end-round.view';\r\nimport { ResponseStartRoundView } from '../models/response-start-round.view';\r\nimport { RequestStartRoundView } from '../models/request-start-round.view';\r\nimport { TakeCardRoundView } from '../models/take-card-round.view';\r\n\r\n@Injectable()\r\nexport class RoundService {\r\n    constructor(private httpClient: HttpClient) { }\r\n\r\n    startRound(gameId: number, isNewRound: boolean): Observable<ResponseStartRoundView> {\r\n        const request = new RequestStartRoundView();\r\n        request.gameId = gameId;\r\n        request.isNewRound = isNewRound;\r\n        return this.httpClient.post<ResponseStartRoundView>('Round/Start', request);\r\n    }\r\n\r\n    takeCard(gameId: number): Observable<TakeCardRoundView> {\r\n        const options = gameId ?\r\n            { params: new HttpParams().set('gameId', gameId.toString()) } : {};\r\n\r\n        return this.httpClient.get<TakeCardRoundView>('Round/TakeCard', options);\r\n    }\r\n\r\n    endRound(gameId: number): Observable<EndRoundView> {\r\n        const options = gameId ?\r\n            { params: new HttpParams().set('gameId', gameId.toString()) } : {};\r\n\r\n        return this.httpClient.get<EndRoundView>('Round/End', options);\r\n    }  \r\n}"],"sourceRoot":""}